front

정적 웹, 동적 웹
정적 웹: 서버에서 HTML, CSS, JS를 가공해서 제공하지 않고 프로그래머가 작성한 그대로 사용자에게 전달
동적 웹: 데이터 베이스로 부터 정보를 읽어 접속할 때마다 최신 정보를 보여주는 웹


SPA (Single Page Application)프론트 프레임워크 (React, View, Agular)가 사용되는 이유
1. 좋아요 버튼 하나때문에 모든 정보를 가져오는 데이터 낭비
->ajax 기술 등장으로 사이트의 부분 변경이 가능해졌지만
이것을 일일이 프로그래밍해야 했다.

2. 데스크탑 뿐만아니라 안드로이드 앱과 서버까지 개발해야함

PC용 사이트(웹)
접속이 들어옴 -> 데이터베이스에서 정보들을 찾아서 ->HTML, CSS, JavaScript로 랜더링 -> 결과를 사용자에게 전해줌

앱
앱 개발자들이 만든 앱에서 서버에 정보를 요청 -> 데이터베이스에서 정보들을 찾아서 앱으로 전송
-> 앱에서는 정보를 받아 안드로이드나 iOS 방식으로 결과를 사용자에게 보여줌

겹치는 부분들을 최소화하고 업무를 조금더 깔끔하게 분할하고 싶어함

안드로이드와 iOS에는 자체적인 SW와 시스템이 있어서
서버로 부터 데이터만 전송받으면 화면이 보여질 수 있다.
웹에서도 그것이 가능하다면, 즉 서버에서 데이터만 보내줘도 
그것을 브라우저에서 HTML, CSS, JS로 랜더링 해낼 수 있다면
서버는 어디에서 요청을 받아도
동일한 작업을 수행해서 데이터를 전송하면 된다.
서버 개발자가 백엔드에만 집중 할 수 있는 것

서버는 정적 웹처럼 HTML, CSS, JS 코드들을 브라우저에 전송
여기에 포함된 JS(자바스크립트가) 주어진 데이터에 따라 HTML 웹페이지를 랜더링 함

EX) 
기존
좋아요 버튼을 누름 -> 좋아요 버튼 누른 이벤트로 서버에 요청 -> 데이터 베이스에 좋아요 수 증가 
-> 증가된 좋아요 수를 다시 사용자에게 전송함으로 페이지 랜더링

SPA
좋아요 버튼을 누름 -> JS에서 페이지 랜더링 && 데이터 베이스에 좋아요 수 증가 요청

SPA는 서버에서 데이터를 받아와야 할 때 마다
요청을 보내서 반환된 데이터로 사이트 내용을 갱신

기존에는 서버가 요리를 완성해서 주었다면
이제는 사용자에게 레시피만 주고 사용자가 요리를 만들게끔 하는 방식인 것이다.

REST API
웹은 컴퓨터와 컴퓨터의 통신으로 이루어진다.
서버와 클라이언트 PC들은 서로의 정보를 주고 받으며 상호작용을 통해 사용자가 원하는 것을 할수 있게 한다.
즉 정보의 전달이 중요한 것이다.
이때 전달해야할 데이터의 규격을 정하게 하여서 주고 받을 때
일일이 설정하는 것이 아닌 하나의 언어로 의사소통하는 것이 바로 REST API이다
각 요청이 어떤 동작이나 정보를 위한 것 인지를 그 요청의 모습 자체로 추론이 가능하다는 것
RESTful하게 만든 API는 요청을 보내는 주소만으로도 대략 무슨 요청인지 파악이 가능하다.
자원을 구조와 함께 나타내는 URI 방식
GET	데이터를 조회하는데 사용	READ
DELETE	데이터를 삭제하는데 사용	DELETE
POST	BODY(안전하게 많이 감추어서 보낼수 있음)	새로운 정보를 추가하는데 사용	CREATE
GET	BODY	정보를 통째로 수정			UPDATE
PATCH	BODY	정보중 일부를 특정 방식으로 수정	UPDATE

즉 데이터베이스에서 어떤 정보를 주어야하는지, 받아야 하는지에 대한 언어 설정이라 보면된다.

back
어플리케이션을 개발하려면 프론트와 백엔드 모두 개발해야 완성이 된다.
하지만 프론트(클라이언트 프로그래밍) 언어와 백엔드(서버프로그래밍) 언어가 다르다.

node.js 등장 -> 언어 하나로 어플리케이션 완성 시킴
npm (Node Package Manager)의 오픈소스 발달 -> 필요한 기능을 많이 사용할 수 있음


database: 
-mysql